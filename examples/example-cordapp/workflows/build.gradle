/*
 * Copyright 2018 Royal Bank of Scotland
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
  targetPlatformVersion corda_platform_version.toInteger()
  minimumPlatformVersion corda_platform_version.toInteger()
  workflow {
    name "Template Flows"
    vendor "Corda Open Source"
    licence "Apache License, Version 2.0"
    versionId 1
  }
}

sourceSets {
  main {
    resources {
      srcDir rootProject.file("config/dev")
    }
  }
  test {
    resources {
      srcDir rootProject.file("config/test")
    }
  }
  integrationTest {
    kotlin {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/kotlin')
    }
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile "junit:junit:$junit_version"

  // Corda integration dependencies
  cordaCompile "net.corda:corda-core:$corda_release_version"
  cordaCompile "net.corda:corda-finance-contracts:$corda_release_version"
  cordaCompile "net.corda:corda-finance-workflows:$corda_release_version"
  cordaCompile "net.corda:corda-jackson:$corda_release_version"
  cordaCompile "net.corda:corda-rpc:$corda_release_version"
  cordaCompile "net.corda:corda-node-api:$corda_release_version"
  cordaRuntime "net.corda:corda:$corda_release_version"
  cordaCompile "net.corda:corda-node:$corda_release_version"

  testCompile "net.corda:corda-node-driver:$corda_release_version"

  // CorDapp dependencies
  // Specify your CorDapp's dependencies below, including dependent CorDapps.
  // We've defined Cash as a dependent CorDapp as an example.
  cordapp project(":contracts")
  compile "io.bluebank.braid:braid-corda:$braid_version"
}

task integrationTest(type: Test, dependsOn: []) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

jar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}