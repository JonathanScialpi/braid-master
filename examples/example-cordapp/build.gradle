/*
 * Copyright 2018 Royal Bank of Scotland
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext {
    corda_release_group = 'net.corda'
    corda_release_version = '4.3'
    corda_gradle_plugins_version = '4.0.44'
    kotlin_version = '1.2.71'
    junit_version = '4.12'
    quasar_version = '0.7.10'
    spring_boot_version = '2.0.2.RELEASE'
    spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
    slf4j_version = '1.7.25'
    log4j_version = '2.11.2'
    corda_platform_version = '4'
    braid_version = '4.1.2-SNAPSHOT'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
    classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
    classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    classpath "org.springframework" +
      ".boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
  }
}

allprojects {
  apply plugin: 'kotlin'

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    maven { url 'https://jitpack.io' }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
      languageVersion = "1.2"
      apiVersion = "1.2"
      jvmTarget = "1.8"
      javaParameters = true // Useful for reflection.
    }
  }

  jar {
    // This makes the JAR's SHA-256 hash repeatable.
    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
  main {
    resources {
      srcDir rootProject.file("config/dev")
    }
  }
  test {
    resources {
      srcDir rootProject.file("config/test")
    }
  }
  integrationTest {
    kotlin {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integration-test/kotlin')
    }
  }
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile "junit:junit:$junit_version"

  // Corda integration dependencies
  cordaCompile "$corda_release_group:corda-core:$corda_release_version"
  cordaCompile "$corda_release_group:corda-finance-contracts:$corda_release_version"
  cordaCompile "$corda_release_group:corda-finance-workflows:$corda_release_version"
  cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
  cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
  cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
  cordaRuntime "$corda_release_group:corda:$corda_release_version"
  cordaCompile "$corda_release_group:corda-node:$corda_release_version"

  testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

  // CorDapp dependencies
  // Specify your CorDapp's dependencies below, including dependent CorDapps.
  // We've defined Cash as a dependent CorDapp as an example.
  cordapp project(":workflows")
  cordapp project(":contracts")
  cordapp "net.corda:corda-finance-contracts:$corda_release_version"
  cordapp "net.corda:corda-finance-workflows:$corda_release_version"
}

cordapp {
  info {
    name "CorDapp Template"
    vendor "Corda Open Source"
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()
  }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
  nodeDefaults {
    projectCordapp {
      deploy = false
    }
    cordapp project(':contracts')
    cordapp project(':workflows')
  }
  node {
    name "O=Notary,L=London,C=GB"
    notary = [validating: false]
    p2pPort 10002
    rpcSettings {
      address("localhost:10003")
      adminAddress("localhost:10043")
    }
  }
  node {
    name "O=PartyA,L=London,C=GB"
    p2pPort 10005
    rpcSettings {
      address("localhost:10006")
      adminAddress("localhost:10046")
    }
    rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
  }
  node {
    name "O=PartyB,L=New York,C=US"
    p2pPort 10008
    rpcSettings {
      address("localhost:10009")
      adminAddress("localhost:10049")
    }
    rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
  }
}

task installQuasar(type: Copy) {
  destinationDir rootProject.file("lib")
  from(configurations.quasar) {
    rename 'quasar-core(.*).jar', 'quasar.jar'
  }
}
